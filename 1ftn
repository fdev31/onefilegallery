#!/usr/bin/env python
from __future__ import print_function
import os
import sys
import ctypes
from PIL import Image

TMP='/tmp/'

class ImageHandler:

    TN_SZ = (200, 200) # pixels

    def __init__(self):
        C="""#include <stdio.h>
#include <string.h>

#include <libexif/exif-data.h>

/* gcc -std=c99 -W -Wall e.c -ggdb3 -lexif -fPIC -shared -o getex.so */

int get_rotation(char *filename) {
    ExifData *image;
    ExifEntry *info;
    char message[1024];

    image = exif_data_new_from_file( filename );
    info = exif_data_get_entry(image, EXIF_TAG_ORIENTATION);
    exif_entry_get_value(info, message, 1024);
    if( strcmp(message, "Left-bottom") == 0) return 90;
    if( strcmp(message, "Right-top") == 0) return 270; /* -90 */
    return 0;
}

/*
   int main(int argc, char **argv) {

   for (int i=1; i<argc; i++) {
   printf("%s %d\n", argv[1], get_rotation(argv[1]));
   }
   return 0;
   }
   */
"""

        SO_FILE = TMP + 'getex.so'
        if not os.path.exists(SO_FILE):
            open(TMP+'e.c', 'w').write(C)
            os.system('gcc ' + TMP + 'e.c -std=c99 -W -Wall -lexif -fPIC -shared -o ' + SO_FILE)

        exif = ctypes.CDLL(SO_FILE)
        fn_sign = ctypes.CFUNCTYPE( ctypes.c_int, ctypes.c_char_p )

        self.fn = fn_sign(exif.get_rotation)
        self.current_img_name = ''

    def _get_image(self, filename):
        if not isinstance(filename, str):
            return filename
        if self.current_img_name != filename:
            self.current_img = Image.open( filename )
            self.current_img_name = filename
        return self.current_img


    def auto_rotate(self, filename):
        img = self._get_image(filename)
        r = self.get_rotation(filename)
        if r != 0:
            img = img.rotate(r)
        return img

    def get_rotation(self, filename):
        return self.fn(filename.encode('latin1'))

    def minify(self, filename, size=None):
        img = self._get_image(filename)
        img.thumbnail( size or self.TN_SZ, Image.ANTIALIAS )


class FatalError(SystemExit): pass

def progress_maker(cur, maxi):
    return '%5.1f%%'%((cur*100.0/maxi))

class ImageList:

    filenames = []
    infos = []

    def __init__(self, path, overwrite=False):
        files = [fname for fname in os.listdir(path) if fname.rsplit('.')[-1].lower() in ('jpg', 'png', 'jpeg')]
        filenames = []
        infos = []
        for i, name in enumerate(files):
            print('\r' + progress_maker(i, len(files)), end='')
            fullpath = os.path.join(path, name)
            filenames.append(fullpath)
            infos.append(dict(t='tn/'+name, f=name))
        self.filenames = filenames
        self.infos = infos
        self.overwrite = overwrite

    def __len__(self):
        return len(self.filenames)

    def make_thumbs(self, out):
        tn_path = os.path.join(out.path, 'tn')
        img_mgr = ImageHandler()
        if not os.path.isdir(tn_path):
            try:
                os.makedirs( tn_path )
            except OSError:
                print('%s must be a valid folder'%tn_path)
                raise FatalError()
        for i, fullpath in enumerate(self.filenames):
            print('\r' + progress_maker(i, len(self.filenames)), end='')
            name = os.path.basename(fullpath)
            t_tn_path = os.path.join( tn_path, name )
            if self.overwrite or not os.path.exists(t_tn_path):
                img_mgr.minify( fullpath )
                src_img = img_mgr.auto_rotate( fullpath )
                src_img.save( t_tn_path , quality=60, progressive=True, optimize=True)

class Output:
    path = None
    def __init__(self, path):
        self.path = path
    def open_file(self, name, mode='w'):
        return open(os.path.join(self.path, name), mode)

class Writer:
    def __init__(self, images, out):
        self.out = out
        self.images = images

class JSONWriter(Writer):
    def write(self, index='images.js'):
        import json
        json.dump(self.images.infos, self.out.open_file(index))

class HTMLWriter(Writer):

    def write(self, index='index.html'):
        tn_path = os.path.join(self.out.path, 'tn')
        fd = open(os.path.join(self.out.path, index), 'w')

        fd.write("""<!DOCTYPE HTML>
            <html>
            <head>
            <title>Gallery</title>
            </head>
            <body>
            <a href="package.zip">Download all files</a><br/>
            <div id="container">
        """)

        for i in self.images.infos:
            fd.write('<a href="%(f)s"><img src="%(t)s" /></a>\n'%i)

        fd.write("</div></body></html>")

INDEX = """
<!DOCTYPE HTML>
<html>
    <head>
        <title>Gallery</title>
        <link href='http://fonts.googleapis.com/css?family=PT+Sans:400,700' rel='stylesheet' type='text/css'>
        <style>
body {
    background: #333;
    font-family: 'PT Sans', sans-serif;
}
img {
    border: none;
    margin: 1ex;
    border: solid 3px #555;
    border-radius: 3px;
}
img.tn:hover {
    border: solid 3px #EEE;
    transform: scale(1.2);
    z-index: 3;
    transition-duration: 300ms;
}
a {
    font-weight: bold;
}
button {
    background: #e3e3e3;
    border: 1px solid #bbb;
    border-radius: 3px;
    -webkit-box-shadow: inset 0 0 1px 1px #f6f6f6;
    box-shadow: inset 0 0 1px 1px #f6f6f6;
    color: #333;
    font: bold 12px/1 "helvetica neue", helvetica, arial, sans-serif;
    margin: 2px;
    text-align: center;
    text-shadow: 0 1px 0 #fff;
}
button.current {
    color: #E33;
}
hr {
    margin: .5ex auto 0 auto;
    width: 50%;
}
#projector {
    position: fixed;
    top: 0;
    width: 98%;
    height: 98%;
    background-color: #567;
    margin: 0;
    padding: 1ex;
    z-index: 3;
    transition-property: top;
    transition-duration: 300ms;
}
#projected {
    display: block;
    margin-top: -3em;
    margin-left: auto;
    margin-right: auto;
    min-width: 10px;
    min-height: 10px;
    max-width: 90%;
    max-height: 90%;
}
#next_projected {
    display: block;
    width: 1px;
    height: 1px;
    margin-top: 1ex;
}
.slide-down {
    top: 101% !important;
    transition-duration: 300ms;
}
.pull-right {
    float: right;
}
.bg_caption {
    color: #EEE;
}
.bigfont {
    font-size: 200%;
    font-weight: bold;
}

        </style>
        <script src="//cdn.jsdelivr.net/jquery/2.1.1/jquery.min.js"></script>
        <script src="//cdn.jsdelivr.net/isotope/2.0.0/isotope.pkgd.min.js"></script>
        <script type="text/javascript">
" use strict "

var data = {};
var pass = '';
var page_size = 25;
var cur_image = 0;

var switch_page = function(nr) {
    $('#container').isotope({ filter: '.p'+nr });
    $('button').removeClass('current');
    $($('button').get(nr)).addClass('current');
}

var _set_next_image = function(url) {
    setTimeout( function() {
        $('#next_projected').attr('src', url);
    }, 150);
}
var _set_image = function() {
    $('#projected').attr('src', pass + '/' + data[cur_image].f);
    var txt = data[cur_image].f.replace(/.*[/]/, '');
    txt += ' ('+(1+cur_image)+'/'+data.length+')';
    $('#projected_name').text( txt );
}

var view_image = function(obj, counter) {
    cur_image = counter;
    _set_image();
    $('#projector').removeClass('slide-down');
}

var next_image = function() {
    if (cur_image+1 < data.length) {
        cur_image++;
        _set_image();
        if (cur_image+1 < data.length) {
            _set_next_image(pass + '/' + data[cur_image+1].f);
        }
    }
}
var prev_image = function() {
    if (cur_image > 0) {
        cur_image--;
        _set_image();
        if (cur_image > 0) {
            _set_next_image(pass + '/' + data[cur_image-1].f);
        }
    }
}

$(function() {
    $('#container').isotope({itemSelector: '.item',   isFitWidth: true, filter:'.p0'});
    pass = prompt("Password:");
    $('#dl_ref').attr('href', pass+'/packages.zip');
    $.get('./'+pass+'/images.js')
        .done(function(res) {
            data = JSON.parse(res);
            var pages = $('#pages');
            for(var i=0; i<data.length; i=i+page_size) {
                var p=i/page_size;
                pages.append( $('<button onclick="switch_page('+p+')">&nbsp;'+(p+1)+'&nbsp;</button>') );
            };
            var cont = $('#container');
            var html = [];
            var d = {};
            var counter = 0;
            for (var i in data) {
                d = data[i];
                html.push('<div class="item p'+Math.floor(counter/page_size)+'" ><img class="tn" onclick="view_image(this, '+counter+')" src="'+pass+'/'+d.t+'" ></img></div>');
                counter++;
            };
            setTimeout( function() {
                cont.isotope('insert', $(html.join('')));
                $('button:first').addClass('current');
            }, 100);
            // ugly workaround of the death
            for (n=1;n<5;n++) {
                setTimeout( function() {
                    cont.isotope('arrange');
                }, n*2*100);
            }
        });

    $(document).keydown(function(e) {

        switch(e.which) {

            case 27: // escape
                $('#projector').addClass('slide-down');
                break;

            case 37: // left
                prev_image();
                break;

            case 38: // up
                prev_image();
                break;

            case 39: // right
                next_image();
                break;

            case 40: // down
                next_image();
                break;

            default: return; // exit this handler for other keys
        }
        e.preventDefault(); // prevent the default action (scroll / move caret)

});

});



        </script>
    </head>
    <body>
        <a class="bg_caption pull-right" href="package.zip">Download all files</a>
        <div id="pages"><span class="bg_caption">Pages:</span></div>
        <hr />
        <div id="container">
        </div>
        <div id="projector"  class="slide-down">
            <button class="pull-right bigfont" onclick="$('#projector').addClass('slide-down')">&#x2716;</button>
            <h1 id="projected_name">Nice photo</h1>
            <button onclick="next_image()" class="pull-right bigfont">&#x27F6;</button>
            <button onclick="prev_image()" class="bigfont">&#x27F5;</button>
            <img id="projected" />
            <img id="next_projected" />
        </div>
    </body>
</html>
"""

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='Make HTML5 Photo gallery.')
    parser.add_argument('input', metavar='FOLDER', type=str, help='folder with original images')
    parser.add_argument('-o', '--output', metavar='FOLDER', type=str, help='destination folder')
    parser.add_argument('-f', '--overwrite', action='store_true', help='overwrite files', default=False)
    parser.add_argument('-c', '--copy', action='store_true', help='copy original images', default=False)
    parser.add_argument('-s', '--resize', metavar='SIZE', action='store', help='resize original images when copying (give a maximum width or height in pixels, i.e: "1280") -- Implies "-c"', default=False)
    parser.add_argument('-q', '--quality', metavar='QUALITY', action='store', type=int, help='Output image quality in range [0-100] -- Useless with "-s"', default=90)
    args = parser.parse_args()

    if args.resize and not args.copy:
        args.copy = True

    print("Listing...")
    images  = ImageList(args.input, overwrite=args.overwrite)
    out = Output(args.output or args.input)
    print("\nMaking thumbnails...")
    images.make_thumbs(out)
    print("\nHTML")
    w = HTMLWriter(images, out)
    w.write()
    print("\nJSON")
    w = JSONWriter(images, out)
    w.write()
    package_files = []
    if args.copy:
        if args.resize:
            print("\nResizing...")
            img_mgr = ImageHandler()
            sz = (int(args.resize), int(args.resize))
            for i, fname in enumerate(images.filenames):
                print('\r' + progress_maker(i, len(images.filenames)), end='')
                p = os.path.join(out.path, os.path.basename(fname))
                package_files.append( p )
                if os.path.exists(p) and not args.overwrite:
                    continue
                img_mgr.minify( fname , sz )
                src_img = img_mgr.auto_rotate( fname )
                src_img.save( p , quality=args.quality, progressive=True, optimize=True)
        else:
            print("\nCopying...")
            for i, fname in enumerate(images.filenames):
                print('\r' + progress_maker(i, len(images.filenames)), end='')
                out_fname = os.path.join(out.path, os.path.basename(fname))
                open(out_fname, 'wb').write( open(fname, 'rb').read() )

    zfname = os.path.join(out.path, 'package.zip')

    if not os.path.exists(zfname) or args.overwrite:
        print("\nZipping...")
        import zipfile
        z = zipfile.ZipFile( zfname, 'w')
        for i, fname in enumerate(package_files or images.filenames):
            print('\r' + progress_maker(i, len(images.filenames)), end='')
            z.write( fname, os.path.basename(fname) )
        z.close()

    print("\n%d files processed."%len(images))
    open(os.path.join(out.path, os.path.pardir, 'index.html'), 'w').write(INDEX)

